name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        ports:
          - "27017:27017"  # Exposes the MongoDB port to the host machine
        options: >-
          --health-cmd="echo 'db.runCommand({ ping: 1 })' | mongosh localhost:27017/test --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variable for MongoDB URI
      run: echo "MONGO_URI=mongodb://localhost:27017" >> $GITHUB_ENV  # MongoDB accessible on localhost

    - name: Start FastAPI with Docker Compose
      run: docker compose up -d --build

    - name: Wait for MongoDB to be ready
      run: |
        echo "Waiting for MongoDB..."
        for i in {1..10}; do
          if mongo --host localhost --port 27017 --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; then
            echo "✅ MongoDB is up"
            break
          else
            echo "⏳ MongoDB not ready... attempt $i"
            sleep 7
          fi
          if [ $i -eq 10 ]; then
            echo "❌ MongoDB did not start in time."
            exit 1
          fi
        done

    - name: Wait for FastAPI to respond
      run: |
        echo "Waiting for FastAPI..."
        for i in {1..10}; do
          if curl -s http://localhost:8000/orders; then
            echo "✅ FastAPI is up"
            break
          else
            echo "⏳ FastAPI not ready... attempt $i"
            sleep 3
          fi
          if [ $i -eq 10 ]; then
            echo "❌ FastAPI did not start in time."
            docker logs fastapi
            exit 1
          fi
        done

    # Run tests outside Docker container
    - name: Run tests outside Docker container
      run: |
        # Run pytest on the host machine (outside of Docker)
        pytest tests/test_orders.py -v

    - name: Shut down containers
      if: always()
      run: docker compose down
